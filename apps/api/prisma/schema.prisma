generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SigningKey {
  id         String   @id() @default(uuid())
  publicKey  String
  privateKey String
  createdAt  DateTime @default(now())
  expiresAt  DateTime @default(dbgenerated("NOW() + '24 hours'"))
}

model User {
  id           String         @id() @default(uuid())
  name         String
  email        String         @unique()
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt()
  GroupMembers GroupMembers[]
  TaskType     TaskType[]
  groupInvites GroupInvite[]
}

model Group {
  id          String   @id() @default(uuid())
  name        String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  members  GroupMembers[]
  TaskType TaskType[]
  invites  GroupInvite[]
}

model GroupMembers {
  membershipType GroupMembershipType
  user           User                @relation(fields: [userId], references: [id])
  userId         String
  group          Group               @relation(fields: [groupId], references: [id])
  groupId        String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt()

  @@id([userId, groupId])
}

enum GroupMembershipType {
  owner
  member
}

model GroupInvite {
  id          String            @id @default(uuid())
  group       Group             @relation(fields: [groupId], references: [id])
  groupId     String
  invitedBy   User              @relation(fields: [invitedById], references: [id])
  invitedById String
  status      GroupInviteStatus @default(pending)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt()
}

enum GroupInviteStatus {
  pending
  accepted
  rejected
}

model TaskType {
  id          String   @id() @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?
  tasks   Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  completedBy String

  type       TaskType @relation(fields: [taskTypeId], references: [id])
  taskTypeId String
}
